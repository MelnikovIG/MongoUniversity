//Post class
    public class Post
    {
        // XXX WORK HERE
        // add in the appropriate properties for a post
        // The homework instructions contain the schema.

        [BsonRepresentation(BsonType.ObjectId)]
        public string Id { get; set; }
        public string Author { get; set; }
        public string Title { get; set; }
        public string Content { get; set; }
        public string[] Tags { get; set; }
        public DateTime CreatedAtUtc { get; set; }
        public Comment[] Comments { get; set; } = new Comment[0];
    }

//Comment class
    public class Comment
    {
        // XXX WORK HERE
        // Add in the appropriate properties.
        // The homework instructions have the
        // necessary schema.

        public string Author { get; set; }
        public string Content { get; set; }
        public DateTime CreatedAtUtc { get; set; }
    }

//Home controller class
    public class HomeController : Controller
    {
        public async Task<ActionResult> Index()
        {
            var blogContext = new BlogContext();
            // XXX WORK HERE
            // find the most recent 10 posts and order them
            // from newest to oldest
            var recentPosts = await blogContext.Posts
                .Find(x => true)
                .SortByDescending(x => x.CreatedAtUtc)
                .Limit(10)
                .ToListAsync();

            var model = new IndexModel
            {
                RecentPosts = recentPosts
            };

            return View(model);
        }

        [HttpGet]
        public ActionResult NewPost()
        {
            return View(new NewPostModel());
        }

        [HttpPost]
        public async Task<ActionResult> NewPost(NewPostModel model)
        {
            if (!ModelState.IsValid)
            {
                return View(model);
            }

            var blogContext = new BlogContext();
            // XXX WORK HERE
            // Insert the post into the posts collection
            var post = new Post()
            {
                Author = User.Identity.Name,
                Title = model.Title,
                Content = model.Content,
                Tags = model.Tags.Split(',').ToArray(),
                CreatedAtUtc = DateTime.UtcNow
            };
            await blogContext.Posts.InsertOneAsync(post);

            return RedirectToAction("Post", new { id = post.Id });
        }

        [HttpGet]
        public async Task<ActionResult> Post(string id)
        {
            var blogContext = new BlogContext();

            // XXX WORK HERE
            // Find the post with the given identifier
            var post = await blogContext.Posts.Find(x => x.Id == id).FirstOrDefaultAsync();

            if (post == null)
            {
                return RedirectToAction("Index");
            }

            var model = new PostModel
            {
                Post = post
            };

            return View(model);
        }

        [HttpGet]
        public async Task<ActionResult> Posts(string tag = null)
        {
            var blogContext = new BlogContext();

            // XXX WORK HERE
            // Find all the posts with the given tag if it exists.
            // Otherwise, return all the posts.
            // Each of these results should be in descending order.
            var posts = await blogContext.Posts
                .Find(x => x.Tags.Contains(tag))
                .SortByDescending(x => x.CreatedAtUtc)
                .ToListAsync();

            if (posts.Count == 0)
            {
                posts = await blogContext.Posts
                    .Find(x => true)
                    .SortByDescending(x => x.CreatedAtUtc)
                    .ToListAsync();
            }

            return View(posts);
        }

        [HttpPost]
        public async Task<ActionResult> NewComment(NewCommentModel model)
        {
            if (!ModelState.IsValid)
            {
                return RedirectToAction("Post", new { id = model.PostId });
            }

            var blogContext = new BlogContext();
            // XXX WORK HERE
            // add a comment to the post identified by model.PostId.
            // you can get the author from "this.User.Identity.Name"
            var updateDefinition = new UpdateDefinitionBuilder<Post>()
                .AddToSet(x => x.Comments, new Comment()
                {
                    Author = this.User.Identity.Name,
                    Content = model.Content,
                    CreatedAtUtc = DateTime.UtcNow
                });

            await blogContext.Posts.UpdateOneAsync(x => x.Id == model.PostId, updateDefinition);

            return RedirectToAction("Post", new { id = model.PostId });
        }
    }
        
